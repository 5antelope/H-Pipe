// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class TensorProto;
class TensorProtos;

enum TensorProto_DataType {
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_INT32 = 2,
  TensorProto_DataType_BYTE = 3,
  TensorProto_DataType_STRING = 4
};
bool TensorProto_DataType_IsValid(int value);
const TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_FLOAT;
const TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_STRING;
const int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor();
inline const ::std::string& TensorProto_DataType_Name(TensorProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorProto_DataType_descriptor(), value);
}
inline bool TensorProto_DataType_Parse(
    const ::std::string& name, TensorProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorProto_DataType>(
    TensorProto_DataType_descriptor(), name, value);
}
// ===================================================================

class TensorProto : public ::google::protobuf::Message {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  void Swap(TensorProto* other);

  // implements Message ----------------------------------------------

  TensorProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TensorProto_DataType DataType;
  static const DataType FLOAT = TensorProto_DataType_FLOAT;
  static const DataType INT32 = TensorProto_DataType_INT32;
  static const DataType BYTE = TensorProto_DataType_BYTE;
  static const DataType STRING = TensorProto_DataType_STRING;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return TensorProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return TensorProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return TensorProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 dims = 1;
  inline int dims_size() const;
  inline void clear_dims();
  static const int kDimsFieldNumber = 1;
  inline ::google::protobuf::int32 dims(int index) const;
  inline void set_dims(int index, ::google::protobuf::int32 value);
  inline void add_dims(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dims() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dims();

  // optional .TensorProto.DataType data_type = 2;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::TensorProto_DataType data_type() const;
  inline void set_data_type(::TensorProto_DataType value);

  // repeated float float_data = 3;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 3;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 4;
  inline int int32_data_size() const;
  inline void clear_int32_data();
  static const int kInt32DataFieldNumber = 4;
  inline ::google::protobuf::int32 int32_data(int index) const;
  inline void set_int32_data(int index, ::google::protobuf::int32 value);
  inline void add_int32_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // optional bytes byte_data = 5;
  inline bool has_byte_data() const;
  inline void clear_byte_data();
  static const int kByteDataFieldNumber = 5;
  inline const ::std::string& byte_data() const;
  inline void set_byte_data(const ::std::string& value);
  inline void set_byte_data(const char* value);
  inline void set_byte_data(const void* value, size_t size);
  inline ::std::string* mutable_byte_data();
  inline ::std::string* release_byte_data();
  inline void set_allocated_byte_data(::std::string* byte_data);

  // repeated bytes string_data = 6;
  inline int string_data_size() const;
  inline void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  inline const ::std::string& string_data(int index) const;
  inline ::std::string* mutable_string_data(int index);
  inline void set_string_data(int index, const ::std::string& value);
  inline void set_string_data(int index, const char* value);
  inline void set_string_data(int index, const void* value, size_t size);
  inline ::std::string* add_string_data();
  inline void add_string_data(const ::std::string& value);
  inline void add_string_data(const char* value);
  inline void add_string_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TensorProto)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_byte_data();
  inline void clear_has_byte_data();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dims_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  ::std::string* byte_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::std::string* name_;
  int data_type_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static TensorProto* default_instance_;
};
// -------------------------------------------------------------------

class TensorProtos : public ::google::protobuf::Message {
 public:
  TensorProtos();
  virtual ~TensorProtos();

  TensorProtos(const TensorProtos& from);

  inline TensorProtos& operator=(const TensorProtos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProtos& default_instance();

  void Swap(TensorProtos* other);

  // implements Message ----------------------------------------------

  TensorProtos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProtos& from);
  void MergeFrom(const TensorProtos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TensorProto protos = 1;
  inline int protos_size() const;
  inline void clear_protos();
  static const int kProtosFieldNumber = 1;
  inline const ::TensorProto& protos(int index) const;
  inline ::TensorProto* mutable_protos(int index);
  inline ::TensorProto* add_protos();
  inline const ::google::protobuf::RepeatedPtrField< ::TensorProto >&
      protos() const;
  inline ::google::protobuf::RepeatedPtrField< ::TensorProto >*
      mutable_protos();

  // @@protoc_insertion_point(class_scope:TensorProtos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TensorProto > protos_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static TensorProtos* default_instance_;
};
// ===================================================================


// ===================================================================

// TensorProto

// repeated int32 dims = 1;
inline int TensorProto::dims_size() const {
  return dims_.size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int32 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:TensorProto.dims)
  return dims_.Get(index);
}
inline void TensorProto::set_dims(int index, ::google::protobuf::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorProto.dims)
}
inline void TensorProto::add_dims(::google::protobuf::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:TensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:TensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:TensorProto.dims)
  return &dims_;
}

// optional .TensorProto.DataType data_type = 2;
inline bool TensorProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::TensorProto_DataType TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:TensorProto.data_type)
  return static_cast< ::TensorProto_DataType >(data_type_);
}
inline void TensorProto::set_data_type(::TensorProto_DataType value) {
  assert(::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:TensorProto.data_type)
}

// repeated float float_data = 3;
inline int TensorProto::float_data_size() const {
  return float_data_.size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:TensorProto.float_data)
  return float_data_.Get(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorProto.float_data)
}
inline void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:TensorProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:TensorProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 4;
inline int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:TensorProto.int32_data)
  return int32_data_.Get(index);
}
inline void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorProto.int32_data)
}
inline void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:TensorProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:TensorProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:TensorProto.int32_data)
  return &int32_data_;
}

// optional bytes byte_data = 5;
inline bool TensorProto::has_byte_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TensorProto::set_has_byte_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TensorProto::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TensorProto::clear_byte_data() {
  if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_->clear();
  }
  clear_has_byte_data();
}
inline const ::std::string& TensorProto::byte_data() const {
  // @@protoc_insertion_point(field_get:TensorProto.byte_data)
  return *byte_data_;
}
inline void TensorProto::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(value);
  // @@protoc_insertion_point(field_set:TensorProto.byte_data)
}
inline void TensorProto::set_byte_data(const char* value) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:TensorProto.byte_data)
}
inline void TensorProto::set_byte_data(const void* value, size_t size) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TensorProto.byte_data)
}
inline ::std::string* TensorProto::mutable_byte_data() {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TensorProto.byte_data)
  return byte_data_;
}
inline ::std::string* TensorProto::release_byte_data() {
  clear_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = byte_data_;
    byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete byte_data_;
  }
  if (byte_data) {
    set_has_byte_data();
    byte_data_ = byte_data;
  } else {
    clear_has_byte_data();
    byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TensorProto.byte_data)
}

// repeated bytes string_data = 6;
inline int TensorProto::string_data_size() const {
  return string_data_.size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:TensorProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TensorProto.string_data)
}
inline ::std::string* TensorProto::add_string_data() {
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TensorProto.string_data)
}
inline void TensorProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TensorProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:TensorProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:TensorProto.string_data)
  return &string_data_;
}

// optional string name = 7;
inline bool TensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TensorProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:TensorProto.name)
  return *name_;
}
inline void TensorProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:TensorProto.name)
}
inline void TensorProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TensorProto.name)
}
inline ::std::string* TensorProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TensorProto.name)
  return name_;
}
inline ::std::string* TensorProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TensorProto.name)
}

// -------------------------------------------------------------------

// TensorProtos

// repeated .TensorProto protos = 1;
inline int TensorProtos::protos_size() const {
  return protos_.size();
}
inline void TensorProtos::clear_protos() {
  protos_.Clear();
}
inline const ::TensorProto& TensorProtos::protos(int index) const {
  // @@protoc_insertion_point(field_get:TensorProtos.protos)
  return protos_.Get(index);
}
inline ::TensorProto* TensorProtos::mutable_protos(int index) {
  // @@protoc_insertion_point(field_mutable:TensorProtos.protos)
  return protos_.Mutable(index);
}
inline ::TensorProto* TensorProtos::add_protos() {
  // @@protoc_insertion_point(field_add:TensorProtos.protos)
  return protos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TensorProto >&
TensorProtos::protos() const {
  // @@protoc_insertion_point(field_list:TensorProtos.protos)
  return protos_;
}
inline ::google::protobuf::RepeatedPtrField< ::TensorProto >*
TensorProtos::mutable_protos() {
  // @@protoc_insertion_point(field_mutable_list:TensorProtos.protos)
  return &protos_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TensorProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TensorProto_DataType>() {
  return ::TensorProto_DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
