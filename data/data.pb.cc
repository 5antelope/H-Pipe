// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TensorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TensorProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProtos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  TensorProto_descriptor_ = file->message_type(0);
  static const int TensorProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, int32_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, byte_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, string_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, name_),
  };
  TensorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProto_descriptor_,
      TensorProto::default_instance_,
      TensorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProto));
  TensorProto_DataType_descriptor_ = TensorProto_descriptor_->enum_type(0);
  TensorProtos_descriptor_ = file->message_type(1);
  static const int TensorProtos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, protos_),
  };
  TensorProtos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProtos_descriptor_,
      TensorProtos::default_instance_,
      TensorProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProtos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProto_descriptor_, &TensorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProtos_descriptor_, &TensorProtos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete TensorProto::default_instance_;
  delete TensorProto_reflection_;
  delete TensorProtos::default_instance_;
  delete TensorProtos_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\"\333\001\n\013TensorProto\022\014\n\004dims\030\001 \003"
    "(\005\022(\n\tdata_type\030\002 \001(\0162\025.TensorProto.Data"
    "Type\022\022\n\nfloat_data\030\003 \003(\002\022\022\n\nint32_data\030\004"
    " \003(\005\022\021\n\tbyte_data\030\005 \001(\014\022\023\n\013string_data\030\006"
    " \003(\014\022\014\n\004name\030\007 \001(\t\"6\n\010DataType\022\t\n\005FLOAT\020"
    "\001\022\t\n\005INT32\020\002\022\010\n\004BYTE\020\003\022\n\n\006STRING\020\004\",\n\014Te"
    "nsorProtos\022\034\n\006protos\030\001 \003(\0132\014.TensorProto", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  TensorProto::default_instance_ = new TensorProto();
  TensorProtos::default_instance_ = new TensorProtos();
  TensorProto::default_instance_->InitAsDefaultInstance();
  TensorProtos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_DataType_descriptor_;
}
bool TensorProto_DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TensorProto_DataType TensorProto::FLOAT;
const TensorProto_DataType TensorProto::INT32;
const TensorProto_DataType TensorProto::BYTE;
const TensorProto_DataType TensorProto::STRING;
const TensorProto_DataType TensorProto::DataType_MIN;
const TensorProto_DataType TensorProto::DataType_MAX;
const int TensorProto::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TensorProto::kDimsFieldNumber;
const int TensorProto::kDataTypeFieldNumber;
const int TensorProto::kFloatDataFieldNumber;
const int TensorProto::kInt32DataFieldNumber;
const int TensorProto::kByteDataFieldNumber;
const int TensorProto::kStringDataFieldNumber;
const int TensorProto::kNameFieldNumber;
#endif  // !_MSC_VER

TensorProto::TensorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TensorProto)
}

void TensorProto::InitAsDefaultInstance() {
}

TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TensorProto)
}

void TensorProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_type_ = 1;
  byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:TensorProto)
  SharedDtor();
}

void TensorProto::SharedDtor() {
  if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete byte_data_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_descriptor_;
}

const TensorProto& TensorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

TensorProto* TensorProto::default_instance_ = NULL;

TensorProto* TensorProto::New() const {
  return new TensorProto;
}

void TensorProto::Clear() {
  if (_has_bits_[0 / 32] & 82) {
    data_type_ = 1;
    if (has_byte_data()) {
      if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        byte_data_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dims = 1;
      case 1: {
        if (tag == 8) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_dims())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // optional .TensorProto.DataType data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TensorProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::TensorProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 3;
      case 3: {
        if (tag == 29) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_float_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_data;
        if (input->ExpectTag(32)) goto parse_int32_data;
        break;
      }

      // repeated int32 int32_data = 4;
      case 4: {
        if (tag == 32) {
         parse_int32_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_int32_data())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int32_data;
        if (input->ExpectTag(42)) goto parse_byte_data;
        break;
      }

      // optional bytes byte_data = 5;
      case 5: {
        if (tag == 42) {
         parse_byte_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        break;
      }

      // repeated bytes string_data = 6;
      case 6: {
        if (tag == 50) {
         parse_string_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TensorProto)
  return false;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TensorProto)
  // repeated int32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dims(i), output);
  }

  // optional .TensorProto.DataType data_type = 2;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated float float_data = 3;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->float_data(i), output);
  }

  // repeated int32 int32_data = 4;
  for (int i = 0; i < this->int32_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->int32_data(i), output);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->byte_data(), output);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->string_data(i), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TensorProto)
}

::google::protobuf::uint8* TensorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TensorProto)
  // repeated int32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->dims(i), target);
  }

  // optional .TensorProto.DataType data_type = 2;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated float float_data = 3;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->float_data(i), target);
  }

  // repeated int32 int32_data = 4;
  for (int i = 0; i < this->int32_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->int32_data(i), target);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->byte_data(), target);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->string_data(i), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TensorProto)
  return target;
}

int TensorProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TensorProto.DataType data_type = 2;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional bytes byte_data = 5;
    if (has_byte_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byte_data());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  // repeated float float_data = 3;
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    total_size += 1 * this->float_data_size() + data_size;
  }

  // repeated int32 int32_data = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_data(i));
    }
    total_size += 1 * this->int32_data_size() + data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 * this->string_data_size();
  for (int i = 0; i < this->string_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  string_data_.MergeFrom(from.string_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_byte_data()) {
      set_byte_data(from.byte_data());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {

  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(data_type_, other->data_type_);
    float_data_.Swap(&other->float_data_);
    int32_data_.Swap(&other->int32_data_);
    std::swap(byte_data_, other->byte_data_);
    string_data_.Swap(&other->string_data_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProto_descriptor_;
  metadata.reflection = TensorProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TensorProtos::kProtosFieldNumber;
#endif  // !_MSC_VER

TensorProtos::TensorProtos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TensorProtos)
}

void TensorProtos::InitAsDefaultInstance() {
}

TensorProtos::TensorProtos(const TensorProtos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TensorProtos)
}

void TensorProtos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProtos::~TensorProtos() {
  // @@protoc_insertion_point(destructor:TensorProtos)
  SharedDtor();
}

void TensorProtos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TensorProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProtos_descriptor_;
}

const TensorProtos& TensorProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

TensorProtos* TensorProtos::default_instance_ = NULL;

TensorProtos* TensorProtos::New() const {
  return new TensorProtos;
}

void TensorProtos::Clear() {
  protos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TensorProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TensorProto protos = 1;
      case 1: {
        if (tag == 10) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_protos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TensorProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TensorProtos)
  return false;
#undef DO_
}

void TensorProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TensorProtos)
  // repeated .TensorProto protos = 1;
  for (int i = 0; i < this->protos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TensorProtos)
}

::google::protobuf::uint8* TensorProtos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TensorProtos)
  // repeated .TensorProto protos = 1;
  for (int i = 0; i < this->protos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->protos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TensorProtos)
  return target;
}

int TensorProtos::ByteSize() const {
  int total_size = 0;

  // repeated .TensorProto protos = 1;
  total_size += 1 * this->protos_size();
  for (int i = 0; i < this->protos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProtos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProtos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProtos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProtos::MergeFrom(const TensorProtos& from) {
  GOOGLE_CHECK_NE(&from, this);
  protos_.MergeFrom(from.protos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProtos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProtos::CopyFrom(const TensorProtos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProtos::IsInitialized() const {

  return true;
}

void TensorProtos::Swap(TensorProtos* other) {
  if (other != this) {
    protos_.Swap(&other->protos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProtos_descriptor_;
  metadata.reflection = TensorProtos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
