// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2.proto

#ifndef PROTOBUF_caffe2_2eproto__INCLUDED
#define PROTOBUF_caffe2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_caffe2_2eproto();
void protobuf_AssignDesc_caffe2_2eproto();
void protobuf_ShutdownFile_caffe2_2eproto();

class TensorProto;
class TensorProtos;
class Argument;
class DeviceOption;
class OperatorDef;
class NetDef;
class ExecutionStep;
class PlanDef;

enum TensorProto_DataType {
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_INT32 = 2,
  TensorProto_DataType_BYTE = 3,
  TensorProto_DataType_STRING = 4
};
bool TensorProto_DataType_IsValid(int value);
const TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_FLOAT;
const TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_STRING;
const int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor();
inline const ::std::string& TensorProto_DataType_Name(TensorProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorProto_DataType_descriptor(), value);
}
inline bool TensorProto_DataType_Parse(
    const ::std::string& name, TensorProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorProto_DataType>(
    TensorProto_DataType_descriptor(), name, value);
}
enum DeviceType {
  CPU = 0,
  CUDA = 1
};
bool DeviceType_IsValid(int value);
const DeviceType DeviceType_MIN = CPU;
const DeviceType DeviceType_MAX = CUDA;
const int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor();
inline const ::std::string& DeviceType_Name(DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceType_descriptor(), value);
}
inline bool DeviceType_Parse(
    const ::std::string& name, DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
// ===================================================================

class TensorProto : public ::google::protobuf::Message {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  void Swap(TensorProto* other);

  // implements Message ----------------------------------------------

  TensorProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TensorProto_DataType DataType;
  static const DataType FLOAT = TensorProto_DataType_FLOAT;
  static const DataType INT32 = TensorProto_DataType_INT32;
  static const DataType BYTE = TensorProto_DataType_BYTE;
  static const DataType STRING = TensorProto_DataType_STRING;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return TensorProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return TensorProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return TensorProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 dims = 1;
  inline int dims_size() const;
  inline void clear_dims();
  static const int kDimsFieldNumber = 1;
  inline ::google::protobuf::int32 dims(int index) const;
  inline void set_dims(int index, ::google::protobuf::int32 value);
  inline void add_dims(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dims() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dims();

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::caffe2::TensorProto_DataType data_type() const;
  inline void set_data_type(::caffe2::TensorProto_DataType value);

  // repeated float float_data = 3 [packed = true];
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 3;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 4 [packed = true];
  inline int int32_data_size() const;
  inline void clear_int32_data();
  static const int kInt32DataFieldNumber = 4;
  inline ::google::protobuf::int32 int32_data(int index) const;
  inline void set_int32_data(int index, ::google::protobuf::int32 value);
  inline void add_int32_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // optional bytes byte_data = 5;
  inline bool has_byte_data() const;
  inline void clear_byte_data();
  static const int kByteDataFieldNumber = 5;
  inline const ::std::string& byte_data() const;
  inline void set_byte_data(const ::std::string& value);
  inline void set_byte_data(const char* value);
  inline void set_byte_data(const void* value, size_t size);
  inline ::std::string* mutable_byte_data();
  inline ::std::string* release_byte_data();
  inline void set_allocated_byte_data(::std::string* byte_data);

  // repeated bytes string_data = 6;
  inline int string_data_size() const;
  inline void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  inline const ::std::string& string_data(int index) const;
  inline ::std::string* mutable_string_data(int index);
  inline void set_string_data(int index, const ::std::string& value);
  inline void set_string_data(int index, const char* value);
  inline void set_string_data(int index, const void* value, size_t size);
  inline ::std::string* add_string_data();
  inline void add_string_data(const ::std::string& value);
  inline void add_string_data(const char* value);
  inline void add_string_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:caffe2.TensorProto)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_byte_data();
  inline void clear_has_byte_data();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dims_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  mutable int _int32_data_cached_byte_size_;
  ::std::string* byte_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::std::string* name_;
  int data_type_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static TensorProto* default_instance_;
};
// -------------------------------------------------------------------

class TensorProtos : public ::google::protobuf::Message {
 public:
  TensorProtos();
  virtual ~TensorProtos();

  TensorProtos(const TensorProtos& from);

  inline TensorProtos& operator=(const TensorProtos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProtos& default_instance();

  void Swap(TensorProtos* other);

  // implements Message ----------------------------------------------

  TensorProtos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorProtos& from);
  void MergeFrom(const TensorProtos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe2.TensorProto protos = 1;
  inline int protos_size() const;
  inline void clear_protos();
  static const int kProtosFieldNumber = 1;
  inline const ::caffe2::TensorProto& protos(int index) const;
  inline ::caffe2::TensorProto* mutable_protos(int index);
  inline ::caffe2::TensorProto* add_protos();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >&
      protos() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >*
      mutable_protos();

  // @@protoc_insertion_point(class_scope:caffe2.TensorProtos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto > protos_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static TensorProtos* default_instance_;
};
// -------------------------------------------------------------------

class Argument : public ::google::protobuf::Message {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  void Swap(Argument* other);

  // implements Message ----------------------------------------------

  Argument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float f = 2;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 2;
  inline float f() const;
  inline void set_f(float value);

  // optional int32 i = 3;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 3;
  inline ::google::protobuf::int32 i() const;
  inline void set_i(::google::protobuf::int32 value);

  // optional string s = 4;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 4;
  inline const ::std::string& s() const;
  inline void set_s(const ::std::string& value);
  inline void set_s(const char* value);
  inline void set_s(const char* value, size_t size);
  inline ::std::string* mutable_s();
  inline ::std::string* release_s();
  inline void set_allocated_s(::std::string* s);

  // repeated float floats = 5;
  inline int floats_size() const;
  inline void clear_floats();
  static const int kFloatsFieldNumber = 5;
  inline float floats(int index) const;
  inline void set_floats(int index, float value);
  inline void add_floats(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      floats() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_floats();

  // repeated int32 ints = 6;
  inline int ints_size() const;
  inline void clear_ints();
  static const int kIntsFieldNumber = 6;
  inline ::google::protobuf::int32 ints(int index) const;
  inline void set_ints(int index, ::google::protobuf::int32 value);
  inline void add_ints(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ints();

  // repeated string strings = 7;
  inline int strings_size() const;
  inline void clear_strings();
  static const int kStringsFieldNumber = 7;
  inline const ::std::string& strings(int index) const;
  inline ::std::string* mutable_strings(int index);
  inline void set_strings(int index, const ::std::string& value);
  inline void set_strings(int index, const char* value);
  inline void set_strings(int index, const char* value, size_t size);
  inline ::std::string* add_strings();
  inline void add_strings(const ::std::string& value);
  inline void add_strings(const char* value);
  inline void add_strings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // @@protoc_insertion_point(class_scope:caffe2.Argument)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_f();
  inline void clear_has_f();
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_s();
  inline void clear_has_s();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float f_;
  ::google::protobuf::int32 i_;
  ::std::string* s_;
  ::google::protobuf::RepeatedField< float > floats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static Argument* default_instance_;
};
// -------------------------------------------------------------------

class DeviceOption : public ::google::protobuf::Message {
 public:
  DeviceOption();
  virtual ~DeviceOption();

  DeviceOption(const DeviceOption& from);

  inline DeviceOption& operator=(const DeviceOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceOption& default_instance();

  void Swap(DeviceOption* other);

  // implements Message ----------------------------------------------

  DeviceOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceOption& from);
  void MergeFrom(const DeviceOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe2.DeviceType device_type = 1 [default = CPU];
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 1;
  inline ::caffe2::DeviceType device_type() const;
  inline void set_device_type(::caffe2::DeviceType value);

  // optional int32 cuda_gpu_id = 2;
  inline bool has_cuda_gpu_id() const;
  inline void clear_cuda_gpu_id();
  static const int kCudaGpuIdFieldNumber = 2;
  inline ::google::protobuf::int32 cuda_gpu_id() const;
  inline void set_cuda_gpu_id(::google::protobuf::int32 value);

  // optional uint32 random_seed = 3;
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 3;
  inline ::google::protobuf::uint32 random_seed() const;
  inline void set_random_seed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe2.DeviceOption)
 private:
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_cuda_gpu_id();
  inline void clear_has_cuda_gpu_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int device_type_;
  ::google::protobuf::int32 cuda_gpu_id_;
  ::google::protobuf::uint32 random_seed_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static DeviceOption* default_instance_;
};
// -------------------------------------------------------------------

class OperatorDef : public ::google::protobuf::Message {
 public:
  OperatorDef();
  virtual ~OperatorDef();

  OperatorDef(const OperatorDef& from);

  inline OperatorDef& operator=(const OperatorDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorDef& default_instance();

  void Swap(OperatorDef* other);

  // implements Message ----------------------------------------------

  OperatorDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatorDef& from);
  void MergeFrom(const OperatorDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input = 1;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 2;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 2;
  inline const ::std::string& output(int index) const;
  inline ::std::string* mutable_output(int index);
  inline void set_output(int index, const ::std::string& value);
  inline void set_output(int index, const char* value);
  inline void set_output(int index, const char* value, size_t size);
  inline ::std::string* add_output();
  inline void add_output(const ::std::string& value);
  inline void add_output(const char* value);
  inline void add_output(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated .caffe2.Argument arg = 5;
  inline int arg_size() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 5;
  inline const ::caffe2::Argument& arg(int index) const;
  inline ::caffe2::Argument* mutable_arg(int index);
  inline ::caffe2::Argument* add_arg();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
      arg() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
      mutable_arg();

  // optional .caffe2.DeviceOption device_option = 6;
  inline bool has_device_option() const;
  inline void clear_device_option();
  static const int kDeviceOptionFieldNumber = 6;
  inline const ::caffe2::DeviceOption& device_option() const;
  inline ::caffe2::DeviceOption* mutable_device_option();
  inline ::caffe2::DeviceOption* release_device_option();
  inline void set_allocated_device_option(::caffe2::DeviceOption* device_option);

  // optional string engine = 7;
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 7;
  inline const ::std::string& engine() const;
  inline void set_engine(const ::std::string& value);
  inline void set_engine(const char* value);
  inline void set_engine(const char* value, size_t size);
  inline ::std::string* mutable_engine();
  inline ::std::string* release_engine();
  inline void set_allocated_engine(::std::string* engine);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OperatorDef)
  // @@protoc_insertion_point(class_scope:caffe2.OperatorDef)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_device_option();
  inline void clear_has_device_option();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::Argument > arg_;
  ::caffe2::DeviceOption* device_option_;
  ::std::string* engine_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static OperatorDef* default_instance_;
};
// -------------------------------------------------------------------

class NetDef : public ::google::protobuf::Message {
 public:
  NetDef();
  virtual ~NetDef();

  NetDef(const NetDef& from);

  inline NetDef& operator=(const NetDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetDef& default_instance();

  void Swap(NetDef* other);

  // implements Message ----------------------------------------------

  NetDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetDef& from);
  void MergeFrom(const NetDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .caffe2.OperatorDef op = 2;
  inline int op_size() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline const ::caffe2::OperatorDef& op(int index) const;
  inline ::caffe2::OperatorDef* mutable_op(int index);
  inline ::caffe2::OperatorDef* add_op();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >&
      op() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >*
      mutable_op();

  // optional string net_type = 3;
  inline bool has_net_type() const;
  inline void clear_net_type();
  static const int kNetTypeFieldNumber = 3;
  inline const ::std::string& net_type() const;
  inline void set_net_type(const ::std::string& value);
  inline void set_net_type(const char* value);
  inline void set_net_type(const char* value, size_t size);
  inline ::std::string* mutable_net_type();
  inline ::std::string* release_net_type();
  inline void set_allocated_net_type(::std::string* net_type);

  // optional int32 num_workers = 4 [deprecated = true];
  inline bool has_num_workers() const PROTOBUF_DEPRECATED;
  inline void clear_num_workers() PROTOBUF_DEPRECATED;
  static const int kNumWorkersFieldNumber = 4;
  inline ::google::protobuf::int32 num_workers() const PROTOBUF_DEPRECATED;
  inline void set_num_workers(::google::protobuf::int32 value) PROTOBUF_DEPRECATED;

  // optional .caffe2.DeviceOption device_option = 5;
  inline bool has_device_option() const;
  inline void clear_device_option();
  static const int kDeviceOptionFieldNumber = 5;
  inline const ::caffe2::DeviceOption& device_option() const;
  inline ::caffe2::DeviceOption* mutable_device_option();
  inline ::caffe2::DeviceOption* release_device_option();
  inline void set_allocated_device_option(::caffe2::DeviceOption* device_option);

  // repeated .caffe2.Argument arg = 6;
  inline int arg_size() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 6;
  inline const ::caffe2::Argument& arg(int index) const;
  inline ::caffe2::Argument* mutable_arg(int index);
  inline ::caffe2::Argument* add_arg();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
      arg() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
      mutable_arg();

  // @@protoc_insertion_point(class_scope:caffe2.NetDef)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_net_type();
  inline void clear_has_net_type();
  inline void set_has_num_workers();
  inline void clear_has_num_workers();
  inline void set_has_device_option();
  inline void clear_has_device_option();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef > op_;
  ::std::string* net_type_;
  ::caffe2::DeviceOption* device_option_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::Argument > arg_;
  ::google::protobuf::int32 num_workers_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static NetDef* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionStep : public ::google::protobuf::Message {
 public:
  ExecutionStep();
  virtual ~ExecutionStep();

  ExecutionStep(const ExecutionStep& from);

  inline ExecutionStep& operator=(const ExecutionStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionStep& default_instance();

  void Swap(ExecutionStep* other);

  // implements Message ----------------------------------------------

  ExecutionStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionStep& from);
  void MergeFrom(const ExecutionStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .caffe2.ExecutionStep substep = 2;
  inline int substep_size() const;
  inline void clear_substep();
  static const int kSubstepFieldNumber = 2;
  inline const ::caffe2::ExecutionStep& substep(int index) const;
  inline ::caffe2::ExecutionStep* mutable_substep(int index);
  inline ::caffe2::ExecutionStep* add_substep();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
      substep() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
      mutable_substep();

  // repeated string network = 3;
  inline int network_size() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 3;
  inline const ::std::string& network(int index) const;
  inline ::std::string* mutable_network(int index);
  inline void set_network(int index, const ::std::string& value);
  inline void set_network(int index, const char* value);
  inline void set_network(int index, const char* value, size_t size);
  inline ::std::string* add_network();
  inline void add_network(const ::std::string& value);
  inline void add_network(const char* value);
  inline void add_network(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& network() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_network();

  // optional int32 num_iter = 4;
  inline bool has_num_iter() const;
  inline void clear_num_iter();
  static const int kNumIterFieldNumber = 4;
  inline ::google::protobuf::int32 num_iter() const;
  inline void set_num_iter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe2.ExecutionStep)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_iter();
  inline void clear_has_num_iter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep > substep_;
  ::google::protobuf::RepeatedPtrField< ::std::string> network_;
  ::google::protobuf::int32 num_iter_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static ExecutionStep* default_instance_;
};
// -------------------------------------------------------------------

class PlanDef : public ::google::protobuf::Message {
 public:
  PlanDef();
  virtual ~PlanDef();

  PlanDef(const PlanDef& from);

  inline PlanDef& operator=(const PlanDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanDef& default_instance();

  void Swap(PlanDef* other);

  // implements Message ----------------------------------------------

  PlanDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanDef& from);
  void MergeFrom(const PlanDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .caffe2.NetDef network = 2;
  inline int network_size() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 2;
  inline const ::caffe2::NetDef& network(int index) const;
  inline ::caffe2::NetDef* mutable_network(int index);
  inline ::caffe2::NetDef* add_network();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >&
      network() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >*
      mutable_network();

  // repeated .caffe2.ExecutionStep execution_step = 3;
  inline int execution_step_size() const;
  inline void clear_execution_step();
  static const int kExecutionStepFieldNumber = 3;
  inline const ::caffe2::ExecutionStep& execution_step(int index) const;
  inline ::caffe2::ExecutionStep* mutable_execution_step(int index);
  inline ::caffe2::ExecutionStep* add_execution_step();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
      execution_step() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
      mutable_execution_step();

  // @@protoc_insertion_point(class_scope:caffe2.PlanDef)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef > network_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep > execution_step_;
  friend void  protobuf_AddDesc_caffe2_2eproto();
  friend void protobuf_AssignDesc_caffe2_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2eproto();

  void InitAsDefaultInstance();
  static PlanDef* default_instance_;
};
// ===================================================================


// ===================================================================

// TensorProto

// repeated int32 dims = 1;
inline int TensorProto::dims_size() const {
  return dims_.size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int32 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.dims)
  return dims_.Get(index);
}
inline void TensorProto::set_dims(int index, ::google::protobuf::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.dims)
}
inline void TensorProto::add_dims(::google::protobuf::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.dims)
  return &dims_;
}

// optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
inline bool TensorProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::caffe2::TensorProto_DataType TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.data_type)
  return static_cast< ::caffe2::TensorProto_DataType >(data_type_);
}
inline void TensorProto::set_data_type(::caffe2::TensorProto_DataType value) {
  assert(::caffe2::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.data_type)
}

// repeated float float_data = 3 [packed = true];
inline int TensorProto::float_data_size() const {
  return float_data_.size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.float_data)
  return float_data_.Get(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.float_data)
}
inline void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 4 [packed = true];
inline int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.int32_data)
  return int32_data_.Get(index);
}
inline void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.int32_data)
}
inline void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.int32_data)
  return &int32_data_;
}

// optional bytes byte_data = 5;
inline bool TensorProto::has_byte_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TensorProto::set_has_byte_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TensorProto::clear_has_byte_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TensorProto::clear_byte_data() {
  if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_->clear();
  }
  clear_has_byte_data();
}
inline const ::std::string& TensorProto::byte_data() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.byte_data)
  return *byte_data_;
}
inline void TensorProto::set_byte_data(const ::std::string& value) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.byte_data)
}
inline void TensorProto::set_byte_data(const char* value) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.byte_data)
}
inline void TensorProto::set_byte_data(const void* value, size_t size) {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  byte_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.byte_data)
}
inline ::std::string* TensorProto::mutable_byte_data() {
  set_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    byte_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.byte_data)
  return byte_data_;
}
inline ::std::string* TensorProto::release_byte_data() {
  clear_has_byte_data();
  if (byte_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = byte_data_;
    byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_byte_data(::std::string* byte_data) {
  if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete byte_data_;
  }
  if (byte_data) {
    set_has_byte_data();
    byte_data_ = byte_data;
  } else {
    clear_has_byte_data();
    byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.byte_data)
}

// repeated bytes string_data = 6;
inline int TensorProto::string_data_size() const {
  return string_data_.size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_data(int index, const char* value) {
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.string_data)
}
inline ::std::string* TensorProto::add_string_data() {
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const char* value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.TensorProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProto.string_data)
  return &string_data_;
}

// optional string name = 7;
inline bool TensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TensorProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProto.name)
  return *name_;
}
inline void TensorProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.TensorProto.name)
}
inline void TensorProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.TensorProto.name)
}
inline ::std::string* TensorProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProto.name)
  return name_;
}
inline ::std::string* TensorProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TensorProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TensorProto.name)
}

// -------------------------------------------------------------------

// TensorProtos

// repeated .caffe2.TensorProto protos = 1;
inline int TensorProtos::protos_size() const {
  return protos_.size();
}
inline void TensorProtos::clear_protos() {
  protos_.Clear();
}
inline const ::caffe2::TensorProto& TensorProtos::protos(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.TensorProtos.protos)
  return protos_.Get(index);
}
inline ::caffe2::TensorProto* TensorProtos::mutable_protos(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.TensorProtos.protos)
  return protos_.Mutable(index);
}
inline ::caffe2::TensorProto* TensorProtos::add_protos() {
  // @@protoc_insertion_point(field_add:caffe2.TensorProtos.protos)
  return protos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >&
TensorProtos::protos() const {
  // @@protoc_insertion_point(field_list:caffe2.TensorProtos.protos)
  return protos_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::TensorProto >*
TensorProtos::mutable_protos() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.TensorProtos.protos)
  return &protos_;
}

// -------------------------------------------------------------------

// Argument

// optional string name = 1;
inline bool Argument::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Argument::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Argument::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Argument::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Argument::name() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.name)
  return *name_;
}
inline void Argument::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.name)
}
inline void Argument::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.name)
}
inline void Argument::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.name)
}
inline ::std::string* Argument::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.name)
  return name_;
}
inline ::std::string* Argument::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Argument::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.name)
}

// optional float f = 2;
inline bool Argument::has_f() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Argument::set_has_f() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Argument::clear_has_f() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Argument::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline float Argument::f() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.f)
  return f_;
}
inline void Argument::set_f(float value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:caffe2.Argument.f)
}

// optional int32 i = 3;
inline bool Argument::has_i() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Argument::set_has_i() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Argument::clear_has_i() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Argument::clear_i() {
  i_ = 0;
  clear_has_i();
}
inline ::google::protobuf::int32 Argument::i() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.i)
  return i_;
}
inline void Argument::set_i(::google::protobuf::int32 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:caffe2.Argument.i)
}

// optional string s = 4;
inline bool Argument::has_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Argument::set_has_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Argument::clear_has_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Argument::clear_s() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_->clear();
  }
  clear_has_s();
}
inline const ::std::string& Argument::s() const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.s)
  return *s_;
}
inline void Argument::set_s(const ::std::string& value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.s)
}
inline void Argument::set_s(const char* value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.s)
}
inline void Argument::set_s(const char* value, size_t size) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.s)
}
inline ::std::string* Argument::mutable_s() {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.s)
  return s_;
}
inline ::std::string* Argument::release_s() {
  clear_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = s_;
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Argument::set_allocated_s(::std::string* s) {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (s) {
    set_has_s();
    s_ = s;
  } else {
    clear_has_s();
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.Argument.s)
}

// repeated float floats = 5;
inline int Argument::floats_size() const {
  return floats_.size();
}
inline void Argument::clear_floats() {
  floats_.Clear();
}
inline float Argument::floats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.floats)
  return floats_.Get(index);
}
inline void Argument::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.floats)
}
inline void Argument::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.floats)
}
inline const ::google::protobuf::RepeatedField< float >&
Argument::floats() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.floats)
  return floats_;
}
inline ::google::protobuf::RepeatedField< float >*
Argument::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.floats)
  return &floats_;
}

// repeated int32 ints = 6;
inline int Argument::ints_size() const {
  return ints_.size();
}
inline void Argument::clear_ints() {
  ints_.Clear();
}
inline ::google::protobuf::int32 Argument::ints(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.ints)
  return ints_.Get(index);
}
inline void Argument::set_ints(int index, ::google::protobuf::int32 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.Argument.ints)
}
inline void Argument::add_ints(::google::protobuf::int32 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Argument::ints() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.ints)
  return ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Argument::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.ints)
  return &ints_;
}

// repeated string strings = 7;
inline int Argument::strings_size() const {
  return strings_.size();
}
inline void Argument::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& Argument::strings(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.Argument.strings)
  return strings_.Get(index);
}
inline ::std::string* Argument::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.Argument.strings)
  return strings_.Mutable(index);
}
inline void Argument::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.Argument.strings)
  strings_.Mutable(index)->assign(value);
}
inline void Argument::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.Argument.strings)
}
inline void Argument::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.Argument.strings)
}
inline ::std::string* Argument::add_strings() {
  return strings_.Add();
}
inline void Argument::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.Argument.strings)
}
inline void Argument::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.Argument.strings)
}
inline void Argument::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.Argument.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Argument::strings() const {
  // @@protoc_insertion_point(field_list:caffe2.Argument.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Argument::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.Argument.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// DeviceOption

// optional .caffe2.DeviceType device_type = 1 [default = CPU];
inline bool DeviceOption::has_device_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceOption::set_has_device_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceOption::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceOption::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::caffe2::DeviceType DeviceOption::device_type() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.device_type)
  return static_cast< ::caffe2::DeviceType >(device_type_);
}
inline void DeviceOption::set_device_type(::caffe2::DeviceType value) {
  assert(::caffe2::DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.device_type)
}

// optional int32 cuda_gpu_id = 2;
inline bool DeviceOption::has_cuda_gpu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceOption::set_has_cuda_gpu_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceOption::clear_has_cuda_gpu_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceOption::clear_cuda_gpu_id() {
  cuda_gpu_id_ = 0;
  clear_has_cuda_gpu_id();
}
inline ::google::protobuf::int32 DeviceOption::cuda_gpu_id() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.cuda_gpu_id)
  return cuda_gpu_id_;
}
inline void DeviceOption::set_cuda_gpu_id(::google::protobuf::int32 value) {
  set_has_cuda_gpu_id();
  cuda_gpu_id_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.cuda_gpu_id)
}

// optional uint32 random_seed = 3;
inline bool DeviceOption::has_random_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceOption::set_has_random_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceOption::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceOption::clear_random_seed() {
  random_seed_ = 0u;
  clear_has_random_seed();
}
inline ::google::protobuf::uint32 DeviceOption::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe2.DeviceOption.random_seed)
  return random_seed_;
}
inline void DeviceOption::set_random_seed(::google::protobuf::uint32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe2.DeviceOption.random_seed)
}

// -------------------------------------------------------------------

// OperatorDef

// repeated string input = 1;
inline int OperatorDef::input_size() const {
  return input_.size();
}
inline void OperatorDef::clear_input() {
  input_.Clear();
}
inline const ::std::string& OperatorDef::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.input)
  return input_.Get(index);
}
inline ::std::string* OperatorDef::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.input)
  return input_.Mutable(index);
}
inline void OperatorDef::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.input)
  input_.Mutable(index)->assign(value);
}
inline void OperatorDef::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.input)
}
inline void OperatorDef::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.input)
}
inline ::std::string* OperatorDef::add_input() {
  return input_.Add();
}
inline void OperatorDef::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.input)
}
inline void OperatorDef::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.input)
}
inline void OperatorDef::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::input() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.input)
  return &input_;
}

// repeated string output = 2;
inline int OperatorDef::output_size() const {
  return output_.size();
}
inline void OperatorDef::clear_output() {
  output_.Clear();
}
inline const ::std::string& OperatorDef::output(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.output)
  return output_.Get(index);
}
inline ::std::string* OperatorDef::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.output)
  return output_.Mutable(index);
}
inline void OperatorDef::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.output)
  output_.Mutable(index)->assign(value);
}
inline void OperatorDef::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.output)
}
inline void OperatorDef::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.output)
}
inline ::std::string* OperatorDef::add_output() {
  return output_.Add();
}
inline void OperatorDef::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.output)
}
inline void OperatorDef::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.OperatorDef.output)
}
inline void OperatorDef::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.OperatorDef.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OperatorDef::output() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OperatorDef::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.output)
  return &output_;
}

// optional string name = 3;
inline bool OperatorDef::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperatorDef::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperatorDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperatorDef::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OperatorDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.name)
  return *name_;
}
inline void OperatorDef::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.name)
}
inline void OperatorDef::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.name)
}
inline void OperatorDef::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.name)
}
inline ::std::string* OperatorDef::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.name)
  return name_;
}
inline ::std::string* OperatorDef::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorDef::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.name)
}

// optional string type = 4;
inline bool OperatorDef::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperatorDef::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperatorDef::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperatorDef::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& OperatorDef::type() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.type)
  return *type_;
}
inline void OperatorDef::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.type)
}
inline void OperatorDef::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.type)
}
inline void OperatorDef::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.type)
}
inline ::std::string* OperatorDef::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.type)
  return type_;
}
inline ::std::string* OperatorDef::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorDef::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.type)
}

// repeated .caffe2.Argument arg = 5;
inline int OperatorDef::arg_size() const {
  return arg_.size();
}
inline void OperatorDef::clear_arg() {
  arg_.Clear();
}
inline const ::caffe2::Argument& OperatorDef::arg(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.arg)
  return arg_.Get(index);
}
inline ::caffe2::Argument* OperatorDef::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.arg)
  return arg_.Mutable(index);
}
inline ::caffe2::Argument* OperatorDef::add_arg() {
  // @@protoc_insertion_point(field_add:caffe2.OperatorDef.arg)
  return arg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
OperatorDef::arg() const {
  // @@protoc_insertion_point(field_list:caffe2.OperatorDef.arg)
  return arg_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
OperatorDef::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.OperatorDef.arg)
  return &arg_;
}

// optional .caffe2.DeviceOption device_option = 6;
inline bool OperatorDef::has_device_option() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OperatorDef::set_has_device_option() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OperatorDef::clear_has_device_option() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OperatorDef::clear_device_option() {
  if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
  clear_has_device_option();
}
inline const ::caffe2::DeviceOption& OperatorDef::device_option() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.device_option)
  return device_option_ != NULL ? *device_option_ : *default_instance_->device_option_;
}
inline ::caffe2::DeviceOption* OperatorDef::mutable_device_option() {
  set_has_device_option();
  if (device_option_ == NULL) device_option_ = new ::caffe2::DeviceOption;
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.device_option)
  return device_option_;
}
inline ::caffe2::DeviceOption* OperatorDef::release_device_option() {
  clear_has_device_option();
  ::caffe2::DeviceOption* temp = device_option_;
  device_option_ = NULL;
  return temp;
}
inline void OperatorDef::set_allocated_device_option(::caffe2::DeviceOption* device_option) {
  delete device_option_;
  device_option_ = device_option;
  if (device_option) {
    set_has_device_option();
  } else {
    clear_has_device_option();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.device_option)
}

// optional string engine = 7;
inline bool OperatorDef::has_engine() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OperatorDef::set_has_engine() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OperatorDef::clear_has_engine() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OperatorDef::clear_engine() {
  if (engine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    engine_->clear();
  }
  clear_has_engine();
}
inline const ::std::string& OperatorDef::engine() const {
  // @@protoc_insertion_point(field_get:caffe2.OperatorDef.engine)
  return *engine_;
}
inline void OperatorDef::set_engine(const ::std::string& value) {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    engine_ = new ::std::string;
  }
  engine_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.OperatorDef.engine)
}
inline void OperatorDef::set_engine(const char* value) {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    engine_ = new ::std::string;
  }
  engine_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.OperatorDef.engine)
}
inline void OperatorDef::set_engine(const char* value, size_t size) {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    engine_ = new ::std::string;
  }
  engine_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.OperatorDef.engine)
}
inline ::std::string* OperatorDef::mutable_engine() {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    engine_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.OperatorDef.engine)
  return engine_;
}
inline ::std::string* OperatorDef::release_engine() {
  clear_has_engine();
  if (engine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = engine_;
    engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperatorDef::set_allocated_engine(::std::string* engine) {
  if (engine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete engine_;
  }
  if (engine) {
    set_has_engine();
    engine_ = engine;
  } else {
    clear_has_engine();
    engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.OperatorDef.engine)
}

// -------------------------------------------------------------------

// NetDef

// optional string name = 1;
inline bool NetDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetDef::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.name)
  return *name_;
}
inline void NetDef::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.NetDef.name)
}
inline void NetDef::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.name)
}
inline void NetDef::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.name)
}
inline ::std::string* NetDef::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.name)
  return name_;
}
inline ::std::string* NetDef::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetDef::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.name)
}

// repeated .caffe2.OperatorDef op = 2;
inline int NetDef::op_size() const {
  return op_.size();
}
inline void NetDef::clear_op() {
  op_.Clear();
}
inline const ::caffe2::OperatorDef& NetDef::op(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.op)
  return op_.Get(index);
}
inline ::caffe2::OperatorDef* NetDef::mutable_op(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.op)
  return op_.Mutable(index);
}
inline ::caffe2::OperatorDef* NetDef::add_op() {
  // @@protoc_insertion_point(field_add:caffe2.NetDef.op)
  return op_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >&
NetDef::op() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.op)
  return op_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::OperatorDef >*
NetDef::mutable_op() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.op)
  return &op_;
}

// optional string net_type = 3;
inline bool NetDef::has_net_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetDef::set_has_net_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetDef::clear_has_net_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetDef::clear_net_type() {
  if (net_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_->clear();
  }
  clear_has_net_type();
}
inline const ::std::string& NetDef::net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.net_type)
  return *net_type_;
}
inline void NetDef::set_net_type(const ::std::string& value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.NetDef.net_type)
}
inline void NetDef::set_net_type(const char* value) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.NetDef.net_type)
}
inline void NetDef::set_net_type(const char* value, size_t size) {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  net_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.NetDef.net_type)
}
inline ::std::string* NetDef::mutable_net_type() {
  set_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.net_type)
  return net_type_;
}
inline ::std::string* NetDef::release_net_type() {
  clear_has_net_type();
  if (net_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = net_type_;
    net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetDef::set_allocated_net_type(::std::string* net_type) {
  if (net_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_type_;
  }
  if (net_type) {
    set_has_net_type();
    net_type_ = net_type;
  } else {
    clear_has_net_type();
    net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.net_type)
}

// optional int32 num_workers = 4 [deprecated = true];
inline bool NetDef::has_num_workers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetDef::set_has_num_workers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetDef::clear_has_num_workers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetDef::clear_num_workers() {
  num_workers_ = 0;
  clear_has_num_workers();
}
inline ::google::protobuf::int32 NetDef::num_workers() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.num_workers)
  return num_workers_;
}
inline void NetDef::set_num_workers(::google::protobuf::int32 value) {
  set_has_num_workers();
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:caffe2.NetDef.num_workers)
}

// optional .caffe2.DeviceOption device_option = 5;
inline bool NetDef::has_device_option() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetDef::set_has_device_option() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetDef::clear_has_device_option() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetDef::clear_device_option() {
  if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
  clear_has_device_option();
}
inline const ::caffe2::DeviceOption& NetDef::device_option() const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.device_option)
  return device_option_ != NULL ? *device_option_ : *default_instance_->device_option_;
}
inline ::caffe2::DeviceOption* NetDef::mutable_device_option() {
  set_has_device_option();
  if (device_option_ == NULL) device_option_ = new ::caffe2::DeviceOption;
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.device_option)
  return device_option_;
}
inline ::caffe2::DeviceOption* NetDef::release_device_option() {
  clear_has_device_option();
  ::caffe2::DeviceOption* temp = device_option_;
  device_option_ = NULL;
  return temp;
}
inline void NetDef::set_allocated_device_option(::caffe2::DeviceOption* device_option) {
  delete device_option_;
  device_option_ = device_option;
  if (device_option) {
    set_has_device_option();
  } else {
    clear_has_device_option();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.NetDef.device_option)
}

// repeated .caffe2.Argument arg = 6;
inline int NetDef::arg_size() const {
  return arg_.size();
}
inline void NetDef::clear_arg() {
  arg_.Clear();
}
inline const ::caffe2::Argument& NetDef::arg(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NetDef.arg)
  return arg_.Get(index);
}
inline ::caffe2::Argument* NetDef::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NetDef.arg)
  return arg_.Mutable(index);
}
inline ::caffe2::Argument* NetDef::add_arg() {
  // @@protoc_insertion_point(field_add:caffe2.NetDef.arg)
  return arg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >&
NetDef::arg() const {
  // @@protoc_insertion_point(field_list:caffe2.NetDef.arg)
  return arg_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::Argument >*
NetDef::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NetDef.arg)
  return &arg_;
}

// -------------------------------------------------------------------

// ExecutionStep

// optional string name = 1;
inline bool ExecutionStep::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionStep::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionStep::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionStep::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ExecutionStep::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.name)
  return *name_;
}
inline void ExecutionStep::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.name)
}
inline void ExecutionStep::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.name)
}
inline void ExecutionStep::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.name)
}
inline ::std::string* ExecutionStep::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.name)
  return name_;
}
inline ::std::string* ExecutionStep::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecutionStep::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.ExecutionStep.name)
}

// repeated .caffe2.ExecutionStep substep = 2;
inline int ExecutionStep::substep_size() const {
  return substep_.size();
}
inline void ExecutionStep::clear_substep() {
  substep_.Clear();
}
inline const ::caffe2::ExecutionStep& ExecutionStep::substep(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.substep)
  return substep_.Get(index);
}
inline ::caffe2::ExecutionStep* ExecutionStep::mutable_substep(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.substep)
  return substep_.Mutable(index);
}
inline ::caffe2::ExecutionStep* ExecutionStep::add_substep() {
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.substep)
  return substep_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
ExecutionStep::substep() const {
  // @@protoc_insertion_point(field_list:caffe2.ExecutionStep.substep)
  return substep_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
ExecutionStep::mutable_substep() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ExecutionStep.substep)
  return &substep_;
}

// repeated string network = 3;
inline int ExecutionStep::network_size() const {
  return network_.size();
}
inline void ExecutionStep::clear_network() {
  network_.Clear();
}
inline const ::std::string& ExecutionStep::network(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.network)
  return network_.Get(index);
}
inline ::std::string* ExecutionStep::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ExecutionStep.network)
  return network_.Mutable(index);
}
inline void ExecutionStep::set_network(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.network)
  network_.Mutable(index)->assign(value);
}
inline void ExecutionStep::set_network(int index, const char* value) {
  network_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.ExecutionStep.network)
}
inline void ExecutionStep::set_network(int index, const char* value, size_t size) {
  network_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.ExecutionStep.network)
}
inline ::std::string* ExecutionStep::add_network() {
  return network_.Add();
}
inline void ExecutionStep::add_network(const ::std::string& value) {
  network_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.ExecutionStep.network)
}
inline void ExecutionStep::add_network(const char* value) {
  network_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.ExecutionStep.network)
}
inline void ExecutionStep::add_network(const char* value, size_t size) {
  network_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.ExecutionStep.network)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecutionStep::network() const {
  // @@protoc_insertion_point(field_list:caffe2.ExecutionStep.network)
  return network_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExecutionStep::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ExecutionStep.network)
  return &network_;
}

// optional int32 num_iter = 4;
inline bool ExecutionStep::has_num_iter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionStep::set_has_num_iter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionStep::clear_has_num_iter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionStep::clear_num_iter() {
  num_iter_ = 0;
  clear_has_num_iter();
}
inline ::google::protobuf::int32 ExecutionStep::num_iter() const {
  // @@protoc_insertion_point(field_get:caffe2.ExecutionStep.num_iter)
  return num_iter_;
}
inline void ExecutionStep::set_num_iter(::google::protobuf::int32 value) {
  set_has_num_iter();
  num_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ExecutionStep.num_iter)
}

// -------------------------------------------------------------------

// PlanDef

// optional string name = 1;
inline bool PlanDef::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanDef::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanDef::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlanDef::name() const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.name)
  return *name_;
}
inline void PlanDef::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.PlanDef.name)
}
inline void PlanDef::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.PlanDef.name)
}
inline void PlanDef::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.PlanDef.name)
}
inline ::std::string* PlanDef::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.name)
  return name_;
}
inline ::std::string* PlanDef::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlanDef::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.PlanDef.name)
}

// repeated .caffe2.NetDef network = 2;
inline int PlanDef::network_size() const {
  return network_.size();
}
inline void PlanDef::clear_network() {
  network_.Clear();
}
inline const ::caffe2::NetDef& PlanDef::network(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.network)
  return network_.Get(index);
}
inline ::caffe2::NetDef* PlanDef::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.network)
  return network_.Mutable(index);
}
inline ::caffe2::NetDef* PlanDef::add_network() {
  // @@protoc_insertion_point(field_add:caffe2.PlanDef.network)
  return network_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >&
PlanDef::network() const {
  // @@protoc_insertion_point(field_list:caffe2.PlanDef.network)
  return network_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::NetDef >*
PlanDef::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PlanDef.network)
  return &network_;
}

// repeated .caffe2.ExecutionStep execution_step = 3;
inline int PlanDef::execution_step_size() const {
  return execution_step_.size();
}
inline void PlanDef::clear_execution_step() {
  execution_step_.Clear();
}
inline const ::caffe2::ExecutionStep& PlanDef::execution_step(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PlanDef.execution_step)
  return execution_step_.Get(index);
}
inline ::caffe2::ExecutionStep* PlanDef::mutable_execution_step(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PlanDef.execution_step)
  return execution_step_.Mutable(index);
}
inline ::caffe2::ExecutionStep* PlanDef::add_execution_step() {
  // @@protoc_insertion_point(field_add:caffe2.PlanDef.execution_step)
  return execution_step_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >&
PlanDef::execution_step() const {
  // @@protoc_insertion_point(field_list:caffe2.PlanDef.execution_step)
  return execution_step_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::ExecutionStep >*
PlanDef::mutable_execution_step() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PlanDef.execution_step)
  return &execution_step_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe2::TensorProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe2::TensorProto_DataType>() {
  return ::caffe2::TensorProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::caffe2::DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe2::DeviceType>() {
  return ::caffe2::DeviceType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe2_2eproto__INCLUDED
