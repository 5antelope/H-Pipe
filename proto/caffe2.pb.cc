// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2.proto
//#ifndef INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION 
//#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* TensorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TensorProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProtos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Argument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Argument_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperatorDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperatorDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanDef_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe2_2eproto() {
  protobuf_AddDesc_caffe2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe2.proto");
  GOOGLE_CHECK(file != NULL);
  TensorProto_descriptor_ = file->message_type(0);
  static const int TensorProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, int32_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, byte_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, string_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, name_),
  };
  TensorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProto_descriptor_,
      TensorProto::default_instance_,
      TensorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProto));
  TensorProto_DataType_descriptor_ = TensorProto_descriptor_->enum_type(0);
  TensorProtos_descriptor_ = file->message_type(1);
  static const int TensorProtos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, protos_),
  };
  TensorProtos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProtos_descriptor_,
      TensorProtos::default_instance_,
      TensorProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProtos));
  Argument_descriptor_ = file->message_type(2);
  static const int Argument_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, floats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, ints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, strings_),
  };
  Argument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Argument_descriptor_,
      Argument::default_instance_,
      Argument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Argument));
  DeviceOption_descriptor_ = file->message_type(3);
  static const int DeviceOption_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, cuda_gpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, random_seed_),
  };
  DeviceOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceOption_descriptor_,
      DeviceOption::default_instance_,
      DeviceOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceOption));
  OperatorDef_descriptor_ = file->message_type(4);
  static const int OperatorDef_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, device_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, engine_),
  };
  OperatorDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperatorDef_descriptor_,
      OperatorDef::default_instance_,
      OperatorDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperatorDef));
  NetDef_descriptor_ = file->message_type(5);
  static const int NetDef_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, num_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, device_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, arg_),
  };
  NetDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetDef_descriptor_,
      NetDef::default_instance_,
      NetDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetDef));
  ExecutionStep_descriptor_ = file->message_type(6);
  static const int ExecutionStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, substep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, num_iter_),
  };
  ExecutionStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionStep_descriptor_,
      ExecutionStep::default_instance_,
      ExecutionStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionStep));
  PlanDef_descriptor_ = file->message_type(7);
  static const int PlanDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, execution_step_),
  };
  PlanDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanDef_descriptor_,
      PlanDef::default_instance_,
      PlanDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanDef));
  DeviceType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProto_descriptor_, &TensorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProtos_descriptor_, &TensorProtos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Argument_descriptor_, &Argument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceOption_descriptor_, &DeviceOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperatorDef_descriptor_, &OperatorDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetDef_descriptor_, &NetDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionStep_descriptor_, &ExecutionStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanDef_descriptor_, &PlanDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe2_2eproto() {
  delete TensorProto::default_instance_;
  delete TensorProto_reflection_;
  delete TensorProtos::default_instance_;
  delete TensorProtos_reflection_;
  delete Argument::default_instance_;
  delete Argument_reflection_;
  delete DeviceOption::default_instance_;
  delete DeviceOption_reflection_;
  delete OperatorDef::default_instance_;
  delete OperatorDef_reflection_;
  delete NetDef::default_instance_;
  delete NetDef_reflection_;
  delete ExecutionStep::default_instance_;
  delete ExecutionStep_reflection_;
  delete PlanDef::default_instance_;
  delete PlanDef_reflection_;
}

void protobuf_AddDesc_caffe2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014caffe2.proto\022\006caffe2\"\361\001\n\013TensorProto\022\014"
    "\n\004dims\030\001 \003(\005\0226\n\tdata_type\030\002 \001(\0162\034.caffe2"
    ".TensorProto.DataType:\005FLOAT\022\026\n\nfloat_da"
    "ta\030\003 \003(\002B\002\020\001\022\026\n\nint32_data\030\004 \003(\005B\002\020\001\022\021\n\t"
    "byte_data\030\005 \001(\014\022\023\n\013string_data\030\006 \003(\014\022\014\n\004"
    "name\030\007 \001(\t\"6\n\010DataType\022\t\n\005FLOAT\020\001\022\t\n\005INT"
    "32\020\002\022\010\n\004BYTE\020\003\022\n\n\006STRING\020\004\"3\n\014TensorProt"
    "os\022#\n\006protos\030\001 \003(\0132\023.caffe2.TensorProto\""
    "h\n\010Argument\022\014\n\004name\030\001 \001(\t\022\t\n\001f\030\002 \001(\002\022\t\n\001"
    "i\030\003 \001(\005\022\t\n\001s\030\004 \001(\t\022\016\n\006floats\030\005 \003(\002\022\014\n\004in"
    "ts\030\006 \003(\005\022\017\n\007strings\030\007 \003(\t\"f\n\014DeviceOptio"
    "n\022,\n\013device_type\030\001 \001(\0162\022.caffe2.DeviceTy"
    "pe:\003CPU\022\023\n\013cuda_gpu_id\030\002 \001(\005\022\023\n\013random_s"
    "eed\030\003 \001(\r\"\257\001\n\013OperatorDef\022\r\n\005input\030\001 \003(\t"
    "\022\016\n\006output\030\002 \003(\t\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004"
    " \001(\t\022\035\n\003arg\030\005 \003(\0132\020.caffe2.Argument\022+\n\rd"
    "evice_option\030\006 \001(\0132\024.caffe2.DeviceOption"
    "\022\016\n\006engine\030\007 \001(\t*\t\010\350\007\020\200\200\200\200\002\"\256\001\n\006NetDef\022\014"
    "\n\004name\030\001 \001(\t\022\037\n\002op\030\002 \003(\0132\023.caffe2.Operat"
    "orDef\022\020\n\010net_type\030\003 \001(\t\022\027\n\013num_workers\030\004"
    " \001(\005B\002\030\001\022+\n\rdevice_option\030\005 \001(\0132\024.caffe2"
    ".DeviceOption\022\035\n\003arg\030\006 \003(\0132\020.caffe2.Argu"
    "ment\"h\n\rExecutionStep\022\014\n\004name\030\001 \001(\t\022&\n\007s"
    "ubstep\030\002 \003(\0132\025.caffe2.ExecutionStep\022\017\n\007n"
    "etwork\030\003 \003(\t\022\020\n\010num_iter\030\004 \001(\005\"g\n\007PlanDe"
    "f\022\014\n\004name\030\001 \001(\t\022\037\n\007network\030\002 \003(\0132\016.caffe"
    "2.NetDef\022-\n\016execution_step\030\003 \003(\0132\025.caffe"
    "2.ExecutionStep*\037\n\nDeviceType\022\007\n\003CPU\020\000\022\010"
    "\n\004CUDA\020\001", 1128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2.proto", &protobuf_RegisterTypes);
  TensorProto::default_instance_ = new TensorProto();
  TensorProtos::default_instance_ = new TensorProtos();
  Argument::default_instance_ = new Argument();
  DeviceOption::default_instance_ = new DeviceOption();
  OperatorDef::default_instance_ = new OperatorDef();
  NetDef::default_instance_ = new NetDef();
  ExecutionStep::default_instance_ = new ExecutionStep();
  PlanDef::default_instance_ = new PlanDef();
  TensorProto::default_instance_->InitAsDefaultInstance();
  TensorProtos::default_instance_->InitAsDefaultInstance();
  Argument::default_instance_->InitAsDefaultInstance();
  DeviceOption::default_instance_->InitAsDefaultInstance();
  OperatorDef::default_instance_->InitAsDefaultInstance();
  NetDef::default_instance_->InitAsDefaultInstance();
  ExecutionStep::default_instance_->InitAsDefaultInstance();
  PlanDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe2_2eproto {
  StaticDescriptorInitializer_caffe2_2eproto() {
    protobuf_AddDesc_caffe2_2eproto();
  }
} static_descriptor_initializer_caffe2_2eproto_;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_DataType_descriptor_;
}
bool TensorProto_DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TensorProto_DataType TensorProto::FLOAT;
const TensorProto_DataType TensorProto::INT32;
const TensorProto_DataType TensorProto::BYTE;
const TensorProto_DataType TensorProto::STRING;
const TensorProto_DataType TensorProto::DataType_MIN;
const TensorProto_DataType TensorProto::DataType_MAX;
const int TensorProto::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TensorProto::kDimsFieldNumber;
const int TensorProto::kDataTypeFieldNumber;
const int TensorProto::kFloatDataFieldNumber;
const int TensorProto::kInt32DataFieldNumber;
const int TensorProto::kByteDataFieldNumber;
const int TensorProto::kStringDataFieldNumber;
const int TensorProto::kNameFieldNumber;
#endif  // !_MSC_VER

TensorProto::TensorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorProto)
}

void TensorProto::InitAsDefaultInstance() {
}

TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorProto)
}

void TensorProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_type_ = 1;
  byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:caffe2.TensorProto)
  SharedDtor();
}

void TensorProto::SharedDtor() {
  if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete byte_data_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_descriptor_;
}

const TensorProto& TensorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorProto* TensorProto::default_instance_ = NULL;

TensorProto* TensorProto::New() const {
  return new TensorProto;
}

void TensorProto::Clear() {
  if (_has_bits_[0 / 32] & 82) {
    data_type_ = 1;
    if (has_byte_data()) {
      if (byte_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        byte_data_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dims = 1;
      case 1: {
        if (tag == 8) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_dims())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
      case 2: {
        if (tag == 16) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe2::TensorProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::caffe2::TensorProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_int32_data;
        break;
      }

      // repeated int32 int32_data = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_int32_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_int32_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_byte_data;
        break;
      }

      // optional bytes byte_data = 5;
      case 5: {
        if (tag == 42) {
         parse_byte_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        break;
      }

      // repeated bytes string_data = 6;
      case 6: {
        if (tag == 50) {
         parse_string_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorProto)
  return false;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorProto)
  // repeated int32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dims(i), output);
  }

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_data_cached_byte_size_);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->float_data(i), output);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int32_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_data(i), output);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->byte_data(), output);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->string_data(i), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorProto)
}

::google::protobuf::uint8* TensorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorProto)
  // repeated int32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->dims(i), target);
  }

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _float_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_data(i), target);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int32_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32_data(i), target);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->byte_data(), target);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->string_data(i), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorProto)
  return target;
}

int TensorProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional bytes byte_data = 5;
    if (has_byte_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byte_data());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  // repeated float float_data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32_data = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 * this->string_data_size();
  for (int i = 0; i < this->string_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  string_data_.MergeFrom(from.string_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_byte_data()) {
      set_byte_data(from.byte_data());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {

  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(data_type_, other->data_type_);
    float_data_.Swap(&other->float_data_);
    int32_data_.Swap(&other->int32_data_);
    std::swap(byte_data_, other->byte_data_);
    string_data_.Swap(&other->string_data_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProto_descriptor_;
  metadata.reflection = TensorProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TensorProtos::kProtosFieldNumber;
#endif  // !_MSC_VER

TensorProtos::TensorProtos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TensorProtos)
}

void TensorProtos::InitAsDefaultInstance() {
}

TensorProtos::TensorProtos(const TensorProtos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.TensorProtos)
}

void TensorProtos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProtos::~TensorProtos() {
  // @@protoc_insertion_point(destructor:caffe2.TensorProtos)
  SharedDtor();
}

void TensorProtos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TensorProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProtos_descriptor_;
}

const TensorProtos& TensorProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorProtos* TensorProtos::default_instance_ = NULL;

TensorProtos* TensorProtos::New() const {
  return new TensorProtos;
}

void TensorProtos::Clear() {
  protos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TensorProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.TensorProto protos = 1;
      case 1: {
        if (tag == 10) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_protos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TensorProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TensorProtos)
  return false;
#undef DO_
}

void TensorProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TensorProtos)
  // repeated .caffe2.TensorProto protos = 1;
  for (int i = 0; i < this->protos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TensorProtos)
}

::google::protobuf::uint8* TensorProtos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TensorProtos)
  // repeated .caffe2.TensorProto protos = 1;
  for (int i = 0; i < this->protos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->protos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TensorProtos)
  return target;
}

int TensorProtos::ByteSize() const {
  int total_size = 0;

  // repeated .caffe2.TensorProto protos = 1;
  total_size += 1 * this->protos_size();
  for (int i = 0; i < this->protos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProtos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProtos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProtos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProtos::MergeFrom(const TensorProtos& from) {
  GOOGLE_CHECK_NE(&from, this);
  protos_.MergeFrom(from.protos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProtos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProtos::CopyFrom(const TensorProtos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProtos::IsInitialized() const {

  return true;
}

void TensorProtos::Swap(TensorProtos* other) {
  if (other != this) {
    protos_.Swap(&other->protos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProtos_descriptor_;
  metadata.reflection = TensorProtos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Argument::kNameFieldNumber;
const int Argument::kFFieldNumber;
const int Argument::kIFieldNumber;
const int Argument::kSFieldNumber;
const int Argument::kFloatsFieldNumber;
const int Argument::kIntsFieldNumber;
const int Argument::kStringsFieldNumber;
#endif  // !_MSC_VER

Argument::Argument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.Argument)
}

void Argument::InitAsDefaultInstance() {
}

Argument::Argument(const Argument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.Argument)
}

void Argument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_ = 0;
  i_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:caffe2.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Argument_descriptor_;
}

const Argument& Argument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

Argument* Argument::default_instance_ = NULL;

Argument* Argument::New() const {
  return new Argument;
}

void Argument::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Argument*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(f_, i_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  floats_.Clear();
  ints_.Clear();
  strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.Argument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_f;
        break;
      }

      // optional float f = 2;
      case 2: {
        if (tag == 21) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_i;
        break;
      }

      // optional int32 i = 3;
      case 3: {
        if (tag == 24) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_s;
        break;
      }

      // optional string s = 4;
      case 4: {
        if (tag == 34) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_floats;
        break;
      }

      // repeated float floats = 5;
      case 5: {
        if (tag == 45) {
         parse_floats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_floats())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floats())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_floats;
        if (input->ExpectTag(48)) goto parse_ints;
        break;
      }

      // repeated int32 ints = 6;
      case 6: {
        if (tag == 48) {
         parse_ints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_ints())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ints;
        if (input->ExpectTag(58)) goto parse_strings;
        break;
      }

      // repeated string strings = 7;
      case 7: {
        if (tag == 58) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strings(this->strings_size() - 1).data(),
            this->strings(this->strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strings");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.Argument)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float f = 2;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f(), output);
  }

  // optional int32 i = 3;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->i(), output);
  }

  // optional string s = 4;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->s(), output);
  }

  // repeated float floats = 5;
  for (int i = 0; i < this->floats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->floats(i), output);
  }

  // repeated int32 ints = 6;
  for (int i = 0; i < this->ints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->ints(i), output);
  }

  // repeated string strings = 7;
  for (int i = 0; i < this->strings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->strings(i).data(), this->strings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.Argument)
}

::google::protobuf::uint8* Argument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.Argument)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float f = 2;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->f(), target);
  }

  // optional int32 i = 3;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->i(), target);
  }

  // optional string s = 4;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->s(), target);
  }

  // repeated float floats = 5;
  for (int i = 0; i < this->floats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->floats(i), target);
  }

  // repeated int32 ints = 6;
  for (int i = 0; i < this->ints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->ints(i), target);
  }

  // repeated string strings = 7;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->strings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.Argument)
  return target;
}

int Argument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float f = 2;
    if (has_f()) {
      total_size += 1 + 4;
    }

    // optional int32 i = 3;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }

    // optional string s = 4;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  // repeated float floats = 5;
  {
    int data_size = 0;
    data_size = 4 * this->floats_size();
    total_size += 1 * this->floats_size() + data_size;
  }

  // repeated int32 ints = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ints(i));
    }
    total_size += 1 * this->ints_size() + data_size;
  }

  // repeated string strings = 7;
  total_size += 1 * this->strings_size();
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Argument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Argument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
  GOOGLE_CHECK_NE(&from, this);
  floats_.MergeFrom(from.floats_);
  ints_.MergeFrom(from.ints_);
  strings_.MergeFrom(from.strings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {

  return true;
}

void Argument::Swap(Argument* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(f_, other->f_);
    std::swap(i_, other->i_);
    std::swap(s_, other->s_);
    floats_.Swap(&other->floats_);
    ints_.Swap(&other->ints_);
    strings_.Swap(&other->strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Argument_descriptor_;
  metadata.reflection = Argument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceOption::kDeviceTypeFieldNumber;
const int DeviceOption::kCudaGpuIdFieldNumber;
const int DeviceOption::kRandomSeedFieldNumber;
#endif  // !_MSC_VER

DeviceOption::DeviceOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.DeviceOption)
}

void DeviceOption::InitAsDefaultInstance() {
}

DeviceOption::DeviceOption(const DeviceOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.DeviceOption)
}

void DeviceOption::SharedCtor() {
  _cached_size_ = 0;
  device_type_ = 0;
  cuda_gpu_id_ = 0;
  random_seed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceOption::~DeviceOption() {
  // @@protoc_insertion_point(destructor:caffe2.DeviceOption)
  SharedDtor();
}

void DeviceOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceOption_descriptor_;
}

const DeviceOption& DeviceOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

DeviceOption* DeviceOption::default_instance_ = NULL;

DeviceOption* DeviceOption::New() const {
  return new DeviceOption;
}

void DeviceOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(device_type_, random_seed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.DeviceOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe2.DeviceType device_type = 1 [default = CPU];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe2::DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::caffe2::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cuda_gpu_id;
        break;
      }

      // optional int32 cuda_gpu_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cuda_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cuda_gpu_id_)));
          set_has_cuda_gpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_random_seed;
        break;
      }

      // optional uint32 random_seed = 3;
      case 3: {
        if (tag == 24) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.DeviceOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.DeviceOption)
  return false;
#undef DO_
}

void DeviceOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.DeviceOption)
  // optional .caffe2.DeviceType device_type = 1 [default = CPU];
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // optional int32 cuda_gpu_id = 2;
  if (has_cuda_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cuda_gpu_id(), output);
  }

  // optional uint32 random_seed = 3;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->random_seed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.DeviceOption)
}

::google::protobuf::uint8* DeviceOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.DeviceOption)
  // optional .caffe2.DeviceType device_type = 1 [default = CPU];
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->device_type(), target);
  }

  // optional int32 cuda_gpu_id = 2;
  if (has_cuda_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cuda_gpu_id(), target);
  }

  // optional uint32 random_seed = 3;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->random_seed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.DeviceOption)
  return target;
}

int DeviceOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe2.DeviceType device_type = 1 [default = CPU];
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional int32 cuda_gpu_id = 2;
    if (has_cuda_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cuda_gpu_id());
    }

    // optional uint32 random_seed = 3;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceOption::MergeFrom(const DeviceOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_cuda_gpu_id()) {
      set_cuda_gpu_id(from.cuda_gpu_id());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceOption::CopyFrom(const DeviceOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOption::IsInitialized() const {

  return true;
}

void DeviceOption::Swap(DeviceOption* other) {
  if (other != this) {
    std::swap(device_type_, other->device_type_);
    std::swap(cuda_gpu_id_, other->cuda_gpu_id_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceOption_descriptor_;
  metadata.reflection = DeviceOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperatorDef::kInputFieldNumber;
const int OperatorDef::kOutputFieldNumber;
const int OperatorDef::kNameFieldNumber;
const int OperatorDef::kTypeFieldNumber;
const int OperatorDef::kArgFieldNumber;
const int OperatorDef::kDeviceOptionFieldNumber;
const int OperatorDef::kEngineFieldNumber;
#endif  // !_MSC_VER

OperatorDef::OperatorDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.OperatorDef)
}

void OperatorDef::InitAsDefaultInstance() {
  device_option_ = const_cast< ::caffe2::DeviceOption*>(&::caffe2::DeviceOption::default_instance());
}

OperatorDef::OperatorDef(const OperatorDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.OperatorDef)
}

void OperatorDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_option_ = NULL;
  engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperatorDef::~OperatorDef() {
  // @@protoc_insertion_point(destructor:caffe2.OperatorDef)
  SharedDtor();
}

void OperatorDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (engine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete engine_;
  }
  if (this != default_instance_) {
    delete device_option_;
  }
}

void OperatorDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatorDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperatorDef_descriptor_;
}

const OperatorDef& OperatorDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

OperatorDef* OperatorDef::default_instance_ = NULL;

OperatorDef* OperatorDef::New() const {
  return new OperatorDef;
}

void OperatorDef::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 108) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_device_option()) {
      if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
    }
    if (has_engine()) {
      if (engine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        engine_->clear();
      }
    }
  }
  input_.Clear();
  output_.Clear();
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperatorDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.OperatorDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input = 1;
      case 1: {
        if (tag == 10) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_input;
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // repeated string output = 2;
      case 2: {
        if (tag == 18) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output(this->output_size() - 1).data(),
            this->output(this->output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "output");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_output;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // optional string type = 4;
      case 4: {
        if (tag == 34) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_arg;
        break;
      }

      // repeated .caffe2.Argument arg = 5;
      case 5: {
        if (tag == 42) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_arg;
        if (input->ExpectTag(50)) goto parse_device_option;
        break;
      }

      // optional .caffe2.DeviceOption device_option = 6;
      case 6: {
        if (tag == 50) {
         parse_device_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_engine;
        break;
      }

      // optional string engine = 7;
      case 7: {
        if (tag == 58) {
         parse_engine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->engine().data(), this->engine().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "engine");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.OperatorDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.OperatorDef)
  return false;
#undef DO_
}

void OperatorDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.OperatorDef)
  // repeated string input = 1;
  for (int i = 0; i < this->input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->input(i).data(), this->input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input(i), output);
  }

  // repeated string output = 2;
  for (int i = 0; i < this->output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->output(i).data(), this->output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // repeated .caffe2.Argument arg = 5;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arg(i), output);
  }

  // optional .caffe2.DeviceOption device_option = 6;
  if (has_device_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device_option(), output);
  }

  // optional string engine = 7;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine().data(), this->engine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->engine(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.OperatorDef)
}

::google::protobuf::uint8* OperatorDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.OperatorDef)
  // repeated string input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input(i), target);
  }

  // repeated string output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->output(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // repeated .caffe2.Argument arg = 5;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arg(i), target);
  }

  // optional .caffe2.DeviceOption device_option = 6;
  if (has_device_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device_option(), target);
  }

  // optional string engine = 7;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine().data(), this->engine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "engine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->engine(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.OperatorDef)
  return target;
}

int OperatorDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe2.DeviceOption device_option = 6;
    if (has_device_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_option());
    }

    // optional string engine = 7;
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engine());
    }

  }
  // repeated string input = 1;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 2;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated .caffe2.Argument arg = 5;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperatorDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperatorDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperatorDef::MergeFrom(const OperatorDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_device_option()) {
      mutable_device_option()->::caffe2::DeviceOption::MergeFrom(from.device_option());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperatorDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorDef::CopyFrom(const OperatorDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorDef::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void OperatorDef::Swap(OperatorDef* other) {
  if (other != this) {
    input_.Swap(&other->input_);
    output_.Swap(&other->output_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    arg_.Swap(&other->arg_);
    std::swap(device_option_, other->device_option_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata OperatorDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperatorDef_descriptor_;
  metadata.reflection = OperatorDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetDef::kNameFieldNumber;
const int NetDef::kOpFieldNumber;
const int NetDef::kNetTypeFieldNumber;
const int NetDef::kNumWorkersFieldNumber;
const int NetDef::kDeviceOptionFieldNumber;
const int NetDef::kArgFieldNumber;
#endif  // !_MSC_VER

NetDef::NetDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.NetDef)
}

void NetDef::InitAsDefaultInstance() {
  device_option_ = const_cast< ::caffe2::DeviceOption*>(&::caffe2::DeviceOption::default_instance());
}

NetDef::NetDef(const NetDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.NetDef)
}

void NetDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_workers_ = 0;
  device_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetDef::~NetDef() {
  // @@protoc_insertion_point(destructor:caffe2.NetDef)
  SharedDtor();
}

void NetDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (net_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_type_;
  }
  if (this != default_instance_) {
    delete device_option_;
  }
}

void NetDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetDef_descriptor_;
}

const NetDef& NetDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

NetDef* NetDef::default_instance_ = NULL;

NetDef* NetDef::New() const {
  return new NetDef;
}

void NetDef::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_net_type()) {
      if (net_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        net_type_->clear();
      }
    }
    num_workers_ = 0;
    if (has_device_option()) {
      if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
    }
  }
  op_.Clear();
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.NetDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op;
        break;
      }

      // repeated .caffe2.OperatorDef op = 2;
      case 2: {
        if (tag == 18) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op;
        if (input->ExpectTag(26)) goto parse_net_type;
        break;
      }

      // optional string net_type = 3;
      case 3: {
        if (tag == 26) {
         parse_net_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_type().data(), this->net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "net_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_workers;
        break;
      }

      // optional int32 num_workers = 4 [deprecated = true];
      case 4: {
        if (tag == 32) {
         parse_num_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_workers_)));
          set_has_num_workers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_option;
        break;
      }

      // optional .caffe2.DeviceOption device_option = 5;
      case 5: {
        if (tag == 42) {
         parse_device_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_arg;
        break;
      }

      // repeated .caffe2.Argument arg = 6;
      case 6: {
        if (tag == 50) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_arg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.NetDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.NetDef)
  return false;
#undef DO_
}

void NetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.NetDef)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe2.OperatorDef op = 2;
  for (int i = 0; i < this->op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->op(i), output);
  }

  // optional string net_type = 3;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_type().data(), this->net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->net_type(), output);
  }

  // optional int32 num_workers = 4 [deprecated = true];
  if (has_num_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_workers(), output);
  }

  // optional .caffe2.DeviceOption device_option = 5;
  if (has_device_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device_option(), output);
  }

  // repeated .caffe2.Argument arg = 6;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.NetDef)
}

::google::protobuf::uint8* NetDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.NetDef)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.OperatorDef op = 2;
  for (int i = 0; i < this->op_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->op(i), target);
  }

  // optional string net_type = 3;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_type().data(), this->net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->net_type(), target);
  }

  // optional int32 num_workers = 4 [deprecated = true];
  if (has_num_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_workers(), target);
  }

  // optional .caffe2.DeviceOption device_option = 5;
  if (has_device_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device_option(), target);
  }

  // repeated .caffe2.Argument arg = 6;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.NetDef)
  return target;
}

int NetDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string net_type = 3;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_type());
    }

    // optional int32 num_workers = 4 [deprecated = true];
    if (has_num_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_workers());
    }

    // optional .caffe2.DeviceOption device_option = 5;
    if (has_device_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_option());
    }

  }
  // repeated .caffe2.OperatorDef op = 2;
  total_size += 1 * this->op_size();
  for (int i = 0; i < this->op_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->op(i));
  }

  // repeated .caffe2.Argument arg = 6;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetDef::MergeFrom(const NetDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  op_.MergeFrom(from.op_);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
    if (from.has_num_workers()) {
      set_num_workers(from.num_workers());
    }
    if (from.has_device_option()) {
      mutable_device_option()->::caffe2::DeviceOption::MergeFrom(from.device_option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDef::CopyFrom(const NetDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDef::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->op())) return false;
  return true;
}

void NetDef::Swap(NetDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    op_.Swap(&other->op_);
    std::swap(net_type_, other->net_type_);
    std::swap(num_workers_, other->num_workers_);
    std::swap(device_option_, other->device_option_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetDef_descriptor_;
  metadata.reflection = NetDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionStep::kNameFieldNumber;
const int ExecutionStep::kSubstepFieldNumber;
const int ExecutionStep::kNetworkFieldNumber;
const int ExecutionStep::kNumIterFieldNumber;
#endif  // !_MSC_VER

ExecutionStep::ExecutionStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ExecutionStep)
}

void ExecutionStep::InitAsDefaultInstance() {
}

ExecutionStep::ExecutionStep(const ExecutionStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.ExecutionStep)
}

void ExecutionStep::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_iter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionStep::~ExecutionStep() {
  // @@protoc_insertion_point(destructor:caffe2.ExecutionStep)
  SharedDtor();
}

void ExecutionStep::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ExecutionStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionStep_descriptor_;
}

const ExecutionStep& ExecutionStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

ExecutionStep* ExecutionStep::default_instance_ = NULL;

ExecutionStep* ExecutionStep::New() const {
  return new ExecutionStep;
}

void ExecutionStep::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    num_iter_ = 0;
  }
  substep_.Clear();
  network_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ExecutionStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_substep;
        break;
      }

      // repeated .caffe2.ExecutionStep substep = 2;
      case 2: {
        if (tag == 18) {
         parse_substep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_substep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_substep;
        if (input->ExpectTag(26)) goto parse_network;
        break;
      }

      // repeated string network = 3;
      case 3: {
        if (tag == 26) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network(this->network_size() - 1).data(),
            this->network(this->network_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_network;
        if (input->ExpectTag(32)) goto parse_num_iter;
        break;
      }

      // optional int32 num_iter = 4;
      case 4: {
        if (tag == 32) {
         parse_num_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_iter_)));
          set_has_num_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ExecutionStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ExecutionStep)
  return false;
#undef DO_
}

void ExecutionStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ExecutionStep)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe2.ExecutionStep substep = 2;
  for (int i = 0; i < this->substep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->substep(i), output);
  }

  // repeated string network = 3;
  for (int i = 0; i < this->network_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->network(i).data(), this->network(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "network");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network(i), output);
  }

  // optional int32 num_iter = 4;
  if (has_num_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_iter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ExecutionStep)
}

::google::protobuf::uint8* ExecutionStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ExecutionStep)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.ExecutionStep substep = 2;
  for (int i = 0; i < this->substep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->substep(i), target);
  }

  // repeated string network = 3;
  for (int i = 0; i < this->network_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network(i).data(), this->network(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "network");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->network(i), target);
  }

  // optional int32 num_iter = 4;
  if (has_num_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_iter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ExecutionStep)
  return target;
}

int ExecutionStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num_iter = 4;
    if (has_num_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_iter());
    }

  }
  // repeated .caffe2.ExecutionStep substep = 2;
  total_size += 1 * this->substep_size();
  for (int i = 0; i < this->substep_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->substep(i));
  }

  // repeated string network = 3;
  total_size += 1 * this->network_size();
  for (int i = 0; i < this->network_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->network(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionStep::MergeFrom(const ExecutionStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  substep_.MergeFrom(from.substep_);
  network_.MergeFrom(from.network_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num_iter()) {
      set_num_iter(from.num_iter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionStep::CopyFrom(const ExecutionStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionStep::IsInitialized() const {

  return true;
}

void ExecutionStep::Swap(ExecutionStep* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    substep_.Swap(&other->substep_);
    network_.Swap(&other->network_);
    std::swap(num_iter_, other->num_iter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionStep_descriptor_;
  metadata.reflection = ExecutionStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanDef::kNameFieldNumber;
const int PlanDef::kNetworkFieldNumber;
const int PlanDef::kExecutionStepFieldNumber;
#endif  // !_MSC_VER

PlanDef::PlanDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PlanDef)
}

void PlanDef::InitAsDefaultInstance() {
}

PlanDef::PlanDef(const PlanDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.PlanDef)
}

void PlanDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanDef::~PlanDef() {
  // @@protoc_insertion_point(destructor:caffe2.PlanDef)
  SharedDtor();
}

void PlanDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlanDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanDef_descriptor_;
}

const PlanDef& PlanDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

PlanDef* PlanDef::default_instance_ = NULL;

PlanDef* PlanDef::New() const {
  return new PlanDef;
}

void PlanDef::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  network_.Clear();
  execution_step_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PlanDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_network;
        break;
      }

      // repeated .caffe2.NetDef network = 2;
      case 2: {
        if (tag == 18) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_network;
        if (input->ExpectTag(26)) goto parse_execution_step;
        break;
      }

      // repeated .caffe2.ExecutionStep execution_step = 3;
      case 3: {
        if (tag == 26) {
         parse_execution_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_execution_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_execution_step;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PlanDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PlanDef)
  return false;
#undef DO_
}

void PlanDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PlanDef)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe2.NetDef network = 2;
  for (int i = 0; i < this->network_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->network(i), output);
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  for (int i = 0; i < this->execution_step_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->execution_step(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PlanDef)
}

::google::protobuf::uint8* PlanDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PlanDef)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.NetDef network = 2;
  for (int i = 0; i < this->network_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->network(i), target);
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  for (int i = 0; i < this->execution_step_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->execution_step(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PlanDef)
  return target;
}

int PlanDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .caffe2.NetDef network = 2;
  total_size += 1 * this->network_size();
  for (int i = 0; i < this->network_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network(i));
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  total_size += 1 * this->execution_step_size();
  for (int i = 0; i < this->execution_step_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->execution_step(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanDef::MergeFrom(const PlanDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  network_.MergeFrom(from.network_);
  execution_step_.MergeFrom(from.execution_step_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanDef::CopyFrom(const PlanDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanDef::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->network())) return false;
  return true;
}

void PlanDef::Swap(PlanDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    network_.Swap(&other->network_);
    execution_step_.Swap(&other->execution_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanDef_descriptor_;
  metadata.reflection = PlanDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

