package caffe2;

message TensorProto {
  // The dimensions in the tensor.
  repeated int32 dims = 1;
  enum DataType {
    FLOAT = 1;
    INT32 = 2;
    BYTE = 3;
    STRING = 4;
  }
  optional DataType data_type = 2 [default = FLOAT];
  repeated float float_data = 3 [packed = true];
  repeated int32 int32_data = 4 [packed = true];
  optional bytes byte_data = 5;
  repeated bytes string_data = 6;
  optional string name = 7;
}

message TensorProtos {
  repeated TensorProto protos = 1;
}

message Argument {
  optional string name = 1;
  optional float f = 2;
  optional int32 i = 3;
  optional string s = 4;
  repeated float floats = 5;
  repeated int32 ints = 6;
  repeated string strings = 7;
}

enum DeviceType {
  CPU = 0;     // In default, we will use CPU.
  CUDA = 1;    // CUDA, with custom kernels.
}

message DeviceOption {
  // Options that need to be carried out before running the execution.
  optional DeviceType device_type = 1 [ default = CPU ];
  // the cuda gpu id. If the device is not CUDA, this field will simply be
  // ignored.
  optional int32 cuda_gpu_id = 2;
  // The random seed to start the device random number generator with.
  optional uint32 random_seed = 3;
}

message OperatorDef {
  repeated string input = 1; // the name of the input blobs
  repeated string output = 2; // the name of output top blobs
  optional string name = 3; // the layer name
  optional string type = 4; // the layer type

  repeated Argument arg = 5;

  optional DeviceOption device_option = 6;

  // Optionally, one can specify an engine when there are multiple
  // implementations available simultaneously for one device type.
  optional string engine = 7;

  // For most networks, don't do extensions. Instead, pack the parameters into
  // the three categories listed above, and document them clearly in the source
  // code.
  extensions 1000 to max;
}

message NetDef {
  optional string name = 1; // the network's name
  // Operators that the network contains.
  // Note(Yangqing): I did not name it "operator" because that is a reserved
  // word in C++.
  repeated OperatorDef op = 2;

  // net_type and net_args are implementation-specific parameters that we want
  // to pass to specialized implementations. If you do not care about this, you
  // don't need to set them.
  optional string net_type = 3; // the type of network that we run this with.

  // the number of workers, if the operators in the network is to be carried out
  // in parallel.
  // Note(Yangqing): I am planning to deprecate this and use the arg field so
  // we can put more flexible arguments.
  optional int32 num_workers = 4 [deprecated=true];

  // The device option for the network. If a network has a specific device
  // option and one of its operators does not have it set, we will copy over the
  // device option to the operator. This allows us to basically avoid putting
  // device options at every operator.
  optional DeviceOption device_option = 5;

  repeated Argument arg = 6;
}

// ExecutionStep is actually a sort-of-hacky way we simulate iteration right
// now.
message ExecutionStep {
  // ExecutionStep should either contain a set of substeps, or a set of
  // network names to run in this execution step. They should NOT both be set
  // at the same time.
  optional string name = 1;
  // An execution step could be recursive, in which it involves a set of
  // substeps.
  repeated ExecutionStep substep = 2;
  // Alternatively, an execution step could involve one or more networks.
  // Note that you cannot have both substeps and networks. Choose one.
  // Note that an executionstep refers networks by their name. The actual
  // network definition of the same name should be included in the network field
  // of the plan. The reason is that a network object might hold internal states
  // (think of a data layer), so we want to have the same network object that
  // multiple steps could ask to run.
  repeated string network = 3;
  // Number of iterations to run this step. The substeps or the networks
  // specified will be run sequentially, and one sequential run is considered
  // one iteration. If this is not set, the number of iterations is assumed to
  // be 1.
  optional int32 num_iter = 4;
}

message PlanDef {
  // All the networks that are used in this execution. Note that networks should
  // be orderd in the way they are executed, i.e. for a layer in a network, all
  // its input blobs should already have been initialized by the layers or
  // networks defined before it.
  optional string name = 1;
  // The networks that are going to be used in this plan.
  repeated NetDef network = 2;
  repeated ExecutionStep execution_step = 3;
}
